package br.com.compass.brazilianStates.controller;

import java.net.URI;
import java.util.Arrays;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.compass.brazilianStates.controller.dto.StateDTO;
import br.com.compass.brazilianStates.controller.input.StateInput;
import br.com.compass.brazilianStates.model.State;
import br.com.compass.brazilianStates.model.TypeRegion;
import br.com.compass.brazilianStates.repository.StateRepository;

@RestController
@RequestMapping("/states")
public class StateController {
	
	@Autowired
	private StateRepository stateRepository;
	
	@GetMapping
	public List<StateDTO> list(TypeRegion region){	
		
		if(region == null) {
			List<State> states = stateRepository.findAll();
			return StateDTO.convertToDto(states);
		}else {
			List<State> states = stateRepository.findByRegion(region);
			return StateDTO.convertToDto(states);
		}
	}
	
	@PostMapping
	public ResponseEntity<StateDTO> add(@RequestBody StateInput input, UriComponentsBuilder uriBuilder) {
		State state = input.convertToState(stateRepository);
		stateRepository.save(state);
		
		URI uri = uriBuilder.path("/states/{id}").buildAndExpand(state.getId()).toUri();
		return ResponseEntity.created(uri).body(new StateDTO(state));
	}
	
	@GetMapping("/{id}")
	public StateDTO check(@PathVariable Long id) {
		State state = stateRepository.getById(id);
		return new StateDTO(state);
	}
	
	@PutMapping("/{id}")
	@Transactional
	public ResponseEntity<StateDTO> update(@PathVariable Long id, @RequestBody StateInput input){
		State state = input.update(id, stateRepository);
		
		return ResponseEntity.ok(new StateDTO(state));
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<StateDTO> remove(@PathVariable Long id){
		stateRepository.deleteById(id);
	}
}
